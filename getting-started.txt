<?php

/**
 * Please fix the items marked with "@TODO" in this class
 * 
 * Follow the https://www.php-fig.org/psr/psr-2/ coding style guide.
 * 
 * One exception to PSR-2: opening braces MUST always be on the same line 
 * for classes, methods, functions, and control structures
 */
class Singleton
{
    
    // @TODO Implement Singleton functionality
    private static $instance = [];
    protected $myName = 'Cahyo Purnomo';
    protected $case = array();
    protected $result = array();

    private function __construct($case, $result)
    {
        $this->case = $case;
        $this->result = $result;
    }

    // Create object only if the class has no instance
    public static function getInstance($case = array(), $result = array())
    {
        if (self::$instance == null)
        {
            self::$instance = new Singleton($case, $result);
        }

        return self::$instance;
    }
    
    /**
     * Display user name
     * 
     * @param string $name User-provided name
     */
    public function userEcho($name)
    {
        // @TODO Validate & sanitize $name
        
        // FILTER_SANITZE_STRING will remove all HTML tags
        $name = filter_var($name, FILTER_SANITIZE_STRING);
        
        if(!preg_match('/^[a-zA-Z ]+$/', $name))
        { 
            // validate only allow alphabets and space only
            echo "The value of '{$name}' is invalid";  
        } else {
            echo "The value of 'name' is '{$name}'";
        }
    }
    
    /**
     * Query by user name
     * 
     * @param string $name User-provided name
     */
    public function userQuery($name)
    {
        // @TODO Validate & sanitize $name

        $name = filter_var($name, FILTER_SANITIZE_STRING);
        
        if(!preg_match('/^[a-zA-Z ]+$/', $name))
        { 
            // validate only allow alphabets and space only
            echo "The value of '{$name}' is invalid";  
        } else {
            $name = stripslashes($name);
            $name = trim(strip_tags($name));
            $name = mysql_real_escape_string($name);
            mysql_query("SELECT * FROM `test` WHERE `name` = '{$name}' LIMIT 1");
        }
    }
    
    /**
     * Output the contents of a file
     * 
     * @param string $path User-provided file path
     */
    public function userFile($path)
    {
        // @TODO Validate & sanitize $path
        
        $uploadDir = './uploads/';
        $allowedFiles = array('php', 'txt');
        $fileExtension = pathinfo($path, PATHINFO_EXTENSION);

        // validation if $path are allowed
        if (isset($path) && in_array($fileExtension, $allowedFiles)) {
            if (move_uploaded_file($path, $uploadDir . $path)) {
                // upload $path
                if (file_exists($uploadDir . $path)) {
                    // if file exist then read the file
                    return readfile($path);     
                } else {
                    return 'file not exist';
                }
            } else {
                return 'upload failed';
            }
        } else {
            return 'file not allowed';
        }
    }
    
    /**
     * Nested conditions
     */
    public function nestedConditions()
    {
        // @TODO Untangle nested conditions
        /*
        if ($conditionA) {
            if ($conditionB) {
                if ($conditionC) {
                    echo 'ABC';
                } else {
                    echo '^C';
                }
            } else {
                echo '^B';
            }
        } else {
            echo '^A';
        }
        */

        $conditionA = true;
        $conditionB = false;
        $conditionC = true;

        if ($conditionA && $conditionB && $conditionC) {
            echo 'ABC';
        } elseif ($conditionA && $conditionB && !$conditionC) {
            echo '^C';
        } elseif ($conditionA && !$conditionB) {
            echo '^B';
        } else {
            echo '^A';
        }
    }
    
    /**
     * Return statements
     * 
     * @return boolean
     */
    public function returnStatements()
    {
        // @TODO Fix

        if ($conditionA) {
            // echo 'A'; //remove this line
            return 'true';
        } else {
            return 'false';
        }
    }
    
    /**
     * Null coalescing
     */
    public function nullCoalescing()
    {
        // @TODO Simplify
        /*
        if (isset($_GET['name'])) {
            $name = $_GET['name'];
        } elseif (isset($_POST['name'])) {
            $name = $_POST['name'];
        } else {
            $name = 'nobody';
        }
        */
        
        if (isset($_REQUEST['name'])) {
            $name = $_REQUEST['name'];
        } else {
            $name = 'nobody';
        }

        return $name;
    }
    
    /**
     * Method chaining
     */
    public function methodChained()
    {
        // @TODO Implement method chaining
        return $this->myName;
    }
    
    /**
     * Additional methods for methodChained
     * 
     */
    public function bold() {
        $this->myName = '<b>' . $this->myName . '</b>';
        return $this;
    }

    public function italic() {
        $this->myName = '<i>' . $this->myName . '</i>';
        return $this;
    }
    
    public function underscore() {
        $this->myName = '<u>' . $this->myName . '</u>';
        return $this;
    } 
     
    /**
     * Immutables are hard to find
     */
    public function checkValue($value)
    {
        $result = null;
        
        // @TODO Make all the immutable values (int, string) in this class 
        // easily replaceable
        switch ($value) {
            case $this->case[0]:
                $result = $this->result[0];
                break;
                
            case $this->case[1]:
                $result = $this->result[1];
                break;
        }
        
        return $result;
    }
    
    /**
     * Check a string is a 24 hour time
     * 
     * @example "00:00:00", "23:59:59", "20:15"
     * @return boolean
     */
    public function regexTest($time24Hour)
    {
        // @TODO Implement RegEx and return type; validate & sanitize input
        if ( $time24Hour != '') {
            if(!preg_match('#^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$#', $time24Hour)) { 
                return false;
            }
        } else {
            return false;
        }
        
        return preg_match('#^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$#', $time24Hour);
          
    }
    
}

$case = ['stringA', 'stringB'];
$result = ['1', '2'];

$instance = Singleton::getInstance($case, $result);

// $string = "<h1>Cahyo Purnomo</h1>";
// $instance->userEcho($string);
// $instance->nestedConditions();
// echo $instance->bold()->italic()->underscore()->methodChained();
// echo $instance->checkValue('stringB');
// echo $instance->regexTest(';');
// echo $instance->returnStatements();
// echo $instance->userFile('web-hook.php');

/*EOF*/
?>
